//哨兵位的作用：保证不越界，去掉内循环的条件判断>0
//如果将首位作为临时空间，则要开辟新的空间，新的临时数组，存放元素范围的最小值，https://blog.csdn.net/ii1245712564/article/details/42079225

//在内存里面重新分配一块比输入数组inputArray长度大一的temp数组，
//空出temp数组的第一个位置，然后把inputArray从第emp数组的第二个位置复制进去，
//既有temp[i+1]=inputArray[i]，i<arrayLength，再把第一个位置temp[0]赋值一个足够小的数字INT_MIN，
//以temp[0]为哨兵，进行插入排序，最后再把temp数组从第二个元素(temp[1])开始，
//重新复制到从第一个元素(inputArray[0])开始的inputArray数组里面，返回。

public class InsertionWithSentinel {
	public InsertionWithSentinel(Comparable[] a) {
		int min = 0;
		for (int i = 0; i < a.length; i++) {
			if(a[i].compareTo(a[min])<0) {
				min =i;//找到最小元素的索引
				//发现找最小值，一种找索引，一种找值，发现找索引相对好，所占内存比较小，值得推崇
			}
		}
		Comparable temp1 = a[0];
		a[0] = a[min];
		a[min] = temp1;
		//上述代码找到最小值，放入a[0]
		
		for (int i = 2; i < a.length; i++) {
			if(a[i].compareTo(a[i-1])<0) {
				for (int j = i;a[j].compareTo(a[j-1])<0; j--) {
					Comparable temp = a[j-1];
					a[j-1] = a[j];
					a[j] = temp;
				}
			}
		}
		
	}
	
}
