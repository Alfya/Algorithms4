


public class BinarySearchST<Key extends Comparable<Key>, Value>{
	private Key[] keys;
	private Value[] values;
	private int N;
	public BinarySearchST(int capacity) {
		keys = (Key[]) new Comparable[capacity];
		values = (Value[]) new Object[capacity];
	}
	public int size() {
		return N;
	}
	public Value get(Key key) {
		if(N==0)
			return null;
		int i = rank(key);
		if(i<N&&key.compareTo(keys[i])==0)
			return values[i];
		return null;
	}
	public void put(Key key, Value value) {
		int i = rank(key);
		if(i<N&&key.compareTo(keys[i])==0) {
			values[i] = value;
			return;
		}
		for(int j=N;j>i;j--) {
			keys[j] = keys[j-1];
			values[j] = values[j-1];
		}
		keys[i] = key;
		values[i] = value;
		N++;
	}
	public int rank(Key key) {
		int lo = 0;
		int hi = N-1;
		while(lo<hi) {
			int mid = lo  + (hi - lo)/2;
			int cmp = key.compareTo(keys[mid]);
			if(cmp>0)
				return lo = mid +1;
			else if(cmp<0)
				return hi = mid-1;
			else
				return mid;
		}
		return lo;
	}
	public void delete(Key key) {
		int i  = rank(key);
		if(i<N&&key.compareTo(keys[i])==0) {
			for(int j = i; j<N-1;j++) {
				keys[j] = keys[j+1];
				values[j] = values[j+1];
			}
			N--;
			keys[N] = null;
			values[N] = null;
		}
	}
	
	public Key floor(Key key) {
		int i = rank(key);
		if (i < N) {
			if (keys[i].compareTo(key) == 0) {
				return key;
			} else if (i > 0) {
				return keys[i - 1];
			}
		}
		return null;
	}
}
