package org.cyp.chapter3;

public class BinarySearchST<Key extends Comparable<Key>, Value> {
	private Key[] keys;
	private Value[] values;
	private int N;
	public BinarySearchST(int capacity) {
		keys = (Key[]) new Comparable[capacity];
		Value values = (Value) new Object[capacity];
	}
	public int size() {
		return N;
	}
	public Value get(Key key) {
		if(N==0)
			return null;
		int i = rank(key);
		if(i<N&&keys[i].compareTo(key)==0)
			return values[i];
		return null;
	}
	//如果key在，则更新；如果key不在，在比他的数往后挪一位；对应的values也要往后挪
	public void put(Key key, Value value) {
		int i = rank(key);
		if(i<N&&keys[i].compareTo(key)==0) {
			values[i] = value;
			return;
		}
		for(int j = N; j>i;j--) {
			keys[j] = keys[j-1];
			values[j] = values[j-1];
		}
		keys[i] = key;
		values[i] = value;
		N++;
	}
	//进行排序
	public int rank(Key key) {
		int lo = 0;
		int hi = N-1;
		while(lo<=hi) {
			int mid = lo+(hi-lo)/2;
			int cmp = key.compareTo(keys[mid]);
			if(cmp>0)
				lo =mid+1;
			else if(cmp<0)
				hi = mid-1;
			else
				return mid;
		}
		return lo;
	}
}
