package org.cyp.chapter3;

public class BST <Key extends Comparable<Key>, Value>{
	private Node root;
	private class Node{
		private Key key;
		private Value val;
		private Node left;
		private Node right;
		private int N;
		Node(Key key, Value val, int N){
			this.key = key;
			this.val = val;
			this.N= N;
		}
	}
	public int size() {
		return size(root);
	}
	
	private int size(Node x) {
		if(x==null)
			return 0;
		else return x.N;
	}

	public Value get(Key key) {
		return get(root, key);
	}
	private Value get(Node x, Key key) {
		if(x==null)
			return null;
		int cmp = key.compareTo(x.key);
		if(cmp>0)
			get(x.right,key);
		else if(cmp<0)
			get(x.left,key);
		else
			return x.val;
		return null;
	}
	public void put(Key key, Value val) {
		root = put(root,key,val);
	}
	private Node put(Node x, Key key, Value val) {
		if(x==null)
			return new Node(key,val,1);//完成了insert方法
		else {
			int cmp = key.compareTo(x.key);
			if(cmp>0)
				x.right = put(x.right,key,val);
			else if(cmp<0)
				x.left = put(x.left,key,val);
			else x.val =val;
			x.N =size(x.left)+size(x.right)+1;
			return x;
		}
	}
	
	public Key min() {
		return min(root).key;
	}

	private Node min(Node x) {
		if(x.left==null) return x;
		return x.left;
	}
	public Key floor(Key key) {
		Node x = floor(root,key);
		if(x==null)
			return null;
		return x.key;
	}
	private Node floor(Node x, Key key) {
		if(x==null)
			return null;
		int cmp = key.compareTo(x.key);
		if(cmp<0)
			return floor(x.left,key);
		if(cmp==0)
			return x;
		Node t = floor(x.right,key);
		if(t!=null)
			return t;
		else
			return x;
	}
	//寻找排名为K的键，即树中正好有k个小于它的键（更好理解为索引为K，从0开始）
	public Key select(int k) {
		return select(root,k).key;
	}
	private Node select(Node x, int k) {
		if(x==null)
			return null;
		int s = size(x.left);
		if(s<k)
			return select(x.right,k-s-1);
		else if(s>k)
			return select(x.left,k);
		else
			return x;
	}
	public int rank(Key key) {
		return rank(root,key);
	}
	private int rank(Node x, Key key) {
		if(x==null)
			return 0;
		int cmp = key.compareTo(x.key);
		if(cmp<0)
			return rank(x.left,key);
		else if(cmp>0)
			return 1+size(x.left)+rank(x.right,key);
		else
			return size(x.left);
	}
	public void deleteMin() {
		root = deleteMin(root);
	}
	private Node deleteMin(Node x) {
		if(x.left==null)
			return x.right;
		x.left = deleteMin(x.left);
		x.N = size(x.left)+size(x.right)+1;
		return x;
	}
	public void delete(Key key) {
		root = delete(root,key);
	}
	private Node delete(Node x, Key key) {
		if(x==null)
			return null;
		int cmp = key.compareTo(x.key);
		if(cmp>0)
			return delete(x.right,key);
		else if(cmp<0)
			return delete(x.left,key);
		else {
			if(x.right==null)
				return x.left;
			if(x.left == null)
				return x.right;
			Node t = x;
			x = min(t.right);
			x.left = t.left;
			x.right = deleteMin(t.right);
		}
		x.N = size(x.left)+size(x.right)+1;
		return x;
	}
}
